{"remainingRequest":"/home/runner/work/U2_Investigacion_Innovacion_2/U2_Investigacion_Innovacion_2/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Investigacion_Innovacion_2/U2_Investigacion_Innovacion_2/src/views/curso/Tema1.vue?vue&type=template&id=5324fc2c&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Investigacion_Innovacion_2/U2_Investigacion_Innovacion_2/src/views/curso/Tema1.vue","mtime":1759207535551},{"path":"/home/runner/work/U2_Investigacion_Innovacion_2/U2_Investigacion_Innovacion_2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Investigacion_Innovacion_2/U2_Investigacion_Innovacion_2/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Investigacion_Innovacion_2/U2_Investigacion_Innovacion_2/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Investigacion_Innovacion_2/U2_Investigacion_Innovacion_2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Investigacion_Innovacion_2/U2_Investigacion_Innovacion_2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubyg6c3ViVGl0dWxvPSInMS4gUm9sZXMgZW4gU2NydW0nIikKICAuY29udGFpbmVyLnRhcmpldGEudGFyamV0YS0tYmxhbmNhLnAtNC5wLW1kLTUub3ZlcmZsb3ctaGlkZGVuCiAgICAKICAgIC8vIEJsb3F1ZTogdGV4dG8taW1hZ2VuIDg6NAogICAgLnJvdy5tYi01CiAgICAgIC5jb2wtbGctOAogICAgICAgIHAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIEVuIGVsIG7DumNsZW8gZGUgU2NydW0sIHNlIGVuY3VlbnRyYW4gdHJlcyByb2xlcyBmdW5kYW1lbnRhbGVzOiBlbCAjW2VtIFByb2R1Y3QgT3duZXJdLCBlbCAjW2VtIFNjcnVtIE1hc3Rlcl0geSBlbCBFcXVpcG8gZGUgRGVzYXJyb2xsby4gRXN0b3Mgbm8gc29uIHNpbXBsZW1lbnRlIGNhcmdvcyBhZG1pbmlzdHJhdGl2b3MsIHNpbm8gcm9sZXMgYmllbiBkZWZpbmlkb3MgcXVlIHBlcm1pdGVuIGxhIGF1dG9nZXN0acOzbiwgY29sYWJvcmFjacOzbiBjb25zdGFudGUgeSBlbnRyZWdhIGNvbnRpbnVhIGRlIHZhbG9yLiBFbnRlbmRlcmxvcyBhIHByb2Z1bmRpZGFkIGVzIGVzZW5jaWFsIHBhcmEgY3VhbHF1aWVyIGVxdWlwbyBxdWUgYnVzcXVlIGltcGxlbWVudGFyIG1ldG9kb2xvZ8OtYXMgw6FnaWxlcyBkZSBtYW5lcmEgZWZlY3RpdmEgeSBzb3N0ZW5pYmxlIChIZXJhcyBkZWwgRGVkbyB5IMOBbHZhcmV6IEdhcmPDrWEsIDIwMTcpLgoKICAgICAgLmNvbC1sZy00LmQtbm9uZS5kLXNtLWJsb2NrCiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS8xLnN2ZyIsIGRhdGEtYW9zPSJ6b29tLWluIikubWItNC5tYi1sZy0wCgogICAgLy8gQmxvcXVlOiBpbmZvZ3JhZmlhLTEKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWNvbG9yLWluZm8ubWItNQogICAgICAucHgtNC5weC1tZC01LnB0LTUKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyLm1iLTAKICAgICAgICAgIC5jb2wtbGctMTIKICAgICAgICAgICAgSW1hZ2VuSW5mb2dyYWZpY2EuY29sb3Itc2VjdW5kYXJpbwogICAgICAgICAgICAgIHRlbXBsYXRlKHYtc2xvdDppbWFnZW4pCiAgICAgICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTEvaW5mb2dyYWZpYTEuc3ZnJywgYWx0PScnLCBzdHlsZT0id2lkdGg6IDEwMCU7IikubXgtYXV0bwoKICAgICAgICAgICAgICAuYmctY29sb3Itd2hpdGUuYm94LXNoYWRvdy5wLTMoeD0iMjUlIiB5PSI1NSUiIG51bWVybz0iKyIpCiAgICAgICAgICAgICAgICBoNSBTY3J1bSBNYXN0ZXIKICAgICAgICAgICAgICAgIHAgLSBBcG95YSBlbiBsYSBhZG9wY2nDs24gZGVsIG1hcmNvIGRlIHJlZmVyZW5jaWEuCiAgICAgICAgICAgICAgICBwIC0gSGFjZSBkZSBjb2FjaCBhbCBQcm9kdWN0IE93bmVyLgogICAgICAgICAgICAgICAgcCAtIEVzdGFibGVjZSBhY3VlcmRvcyB5IHByZXBhcmEgZWwgZW50b3JubywgcGFyYSBhZG9wdGFyIHByw6FjdGljYXMgw6FnaWxlcy4KCiAgICAgICAgICAgICAgLmJnLWNvbG9yLXdoaXRlLmJveC1zaGFkb3cucC0zKHg9IjY2JSIgeT0iMjUlIiBudW1lcm89IisiKQogICAgICAgICAgICAgICAgaDUgUHJvZHVjdCBPd25lcgogICAgICAgICAgICAgICAgcCAtIERlZmluZSBsYSB2aXNpw7NuIGRlbCBuZWdvY2lvLgogICAgICAgICAgICAgICAgcCAtIEF5dWRhIGEgY3JlYXIgZWwgYWN0YSBjb25zdGl0dXRpdmEgZGVsIHByb3llY3RvIHkgc3UgcHJlc3VwdWVzdG8uCgogICAgICAgICAgICAgIC5iZy1jb2xvci13aGl0ZS5ib3gtc2hhZG93LnAtMyh4PSI2My41JSIgeT0iNjYlIiBudW1lcm89IisiKQogICAgICAgICAgICAgICAgaDUgRGV2ZWxvcG1lbnQgVGVhbQogICAgICAgICAgICAgICAgcCAtIFNlIGVtcGllemEgYSB2aXN1YWxpemFyIHkgbmVnb2NpYXIgc3UgY29tcG9zaWNpw7NuLgogICAgICAgICAgICAgICAgcCAtIEV4cGVydG8gcGFyYSBkZXNhcnJvbGxhciBlbCBwcm9kdWN0by4KCiAgICAvLyBCbG9xdWU6IHRpdHVsby1zZWd1bmRvCiAgICAjdF8xXzEudGl0dWxvLXNlZ3VuZG8oZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICBoMiAjW3NwYW4gMS4xXSBGdW5jaW9uZXMgZGVsIFByb2R1Y3QgT3duZXIKCiAgICBwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKS5tYi00IEVsICNbZW0gUHJvZHVjdCBPd25lcl0gKFBPKSByZXByZXNlbnRhIGxhIHZveiBkZWwgY2xpZW50ZSB5IGRlbCBuZWdvY2lvIGRlbnRybyBkZWwgZXF1aXBvIFNjcnVtLiBFcyBxdWllbiBwb3NlZSBsYSByZXNwb25zYWJpbGlkYWQgZmluYWwgc29icmUgZWwgcHJvZHVjdG8sIGFzZWd1cmFuZG8gcXVlIGNhZGEgZnVuY2lvbmFsaWRhZCBkZXNhcnJvbGxhZGEgcmVzcG9uZGEgYSB1bmEgbmVjZXNpZGFkIHJlYWwgZGVsIHVzdWFyaW8gbyBkZWwgbWVyY2Fkby4gU3UgcGFwZWwgZXMgY3LDrXRpY28sIGRhZG8gcXVlIHVuYSBtYWxhIHByaW9yaXphY2nDs24sIHB1ZWRlIGxsZXZhciBhbCBkZXNhcnJvbGxvIGRlIGZ1bmNpb25hbGlkYWRlcyBpbsO6dGlsZXMgbyBhbCB1c28gaW5lZmljaWVudGUgZGUgbG9zIHJlY3Vyc29zIGRlbCBlcXVpcG8uCgogICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikubWItNSBDb25vemNhbW9zIHN1cyBmdW5jaW9uZXM6CgogICAgLy8gQmxvcXVlOiBzbHlkZXItYQogICAgLmJnLWZ1bGwtd2lkdGguYmctZm9uZG8tc2xpZGVyLm1iLTAKICAgICAgLnAtNC5wLW1kLTUKICAgICAgICBTbHlkZXJBKHRpcG89ImIiKS5iZy13aGl0ZQogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIucC00LnAtbWQtNQogICAgICAgICAgICAuY29sLWxnLTUub3JkZXItbGctMgogICAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvMi5wbmciKQogICAgICAgICAgICAuY29sLWxnLTcub3JkZXItbGctMQogICAgICAgICAgICAgIGgzIEdlc3Rpw7NuIGRlbCAjW2VtIFByb2R1Y3QgQmFja2xvZ10KICAgICAgICAgICAgICBwIEVsIFByb2R1Y3QgT3duZXIgY3JlYSB5IG1hbnRpZW5lIGFjdHVhbGl6YWRvIGVsIFByb2R1Y3QgQmFja2xvZywgdW5hIGxpc3RhIHByaW9yaXphZGEgZGUgZnVuY2lvbmFsaWRhZGVzLCByZXF1aXNpdG9zIHkgbWVqb3Jhcy4gTm8gc2UgdHJhdGEgc2ltcGxlbWVudGUgZGUgbGlzdGFyIHRhcmVhcywgc2lubyBkZSBhcnRpY3VsYXIgbGEgZXN0cmF0ZWdpYSBkZWwgcHJvZHVjdG8gZW4gdW5pZGFkZXMgZnVuY2lvbmFsZXMgZGUgdHJhYmFqby4gQ2FkYSDDrXRlbSBkZWJlIHRlbmVyIHVuIHByb3DDs3NpdG8gY2xhcm8geSBlc3RhciB2YWxvcmFkbyBlbiBmdW5jacOzbiBkZSBzdSBpbXBhY3RvIHkgY29tcGxlamlkYWQuCgogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIucC00LnAtbWQtNQogICAgICAgICAgICAuY29sLWxnLTUub3JkZXItbGctMgogICAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvMy5wbmciKQogICAgICAgICAgICAuY29sLWxnLTcub3JkZXItbGctMQogICAgICAgICAgICAgIGgzIE1heGltaXphY2nDs24gZGVsIHZhbG9yIGRlbCBwcm9kdWN0bwogICAgICAgICAgICAgIHAgTGEgcHJpbmNpcGFsIHJlc3BvbnNhYmlsaWRhZCBkZWwgUE8sIGVzIGFzZWd1cmFyIHF1ZSBlbCBlcXVpcG8gdHJhYmFqZSBlbiBsbyBtw6FzIHZhbGlvc28gZW4gY2FkYSBtb21lbnRvLiBFc3RvIHNlIGxvZ3JhIG1lZGlhbnRlIGVsIHJlZmluYW1pZW50byBjb250aW51byBkZWwgYmFja2xvZyB5IGVsIGFuw6FsaXNpcyBkZSBtw6l0cmljYXMgY29tbyBST0ksIHNhdGlzZmFjY2nDs24gZGVsIGNsaWVudGUgbyB0aW1lIHRvIG1hcmtldC4gRW4gY29udGV4dG9zIGRlIGFsdGEgaW5jZXJ0aWR1bWJyZSwgY29tbyBzdGFydHVwcyB0ZWNub2zDs2dpY2FzLCBlc3RhIGZ1bmNpw7NuIGFkcXVpZXJlIGHDum4gbcOhcyBpbXBvcnRhbmNpYS4KCiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlci5wLTQucC1tZC01CiAgICAgICAgICAgIC5jb2wtbGctNS5vcmRlci1sZy0yCiAgICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS80LnBuZyIpCiAgICAgICAgICAgIC5jb2wtbGctNy5vcmRlci1sZy0xCiAgICAgICAgICAgICAgaDMgQ29sYWJvcmFjacOzbiBjb24gbG9zICNbZW0gc3Rha2Vob2xkZXJzXQogICAgICAgICAgICAgIHAgRWwgUE8gZGViZSBhbGluZWFyIGNvbnRpbnVhbWVudGUgbGFzIGV4cGVjdGF0aXZhcyBkZWwgY2xpZW50ZSwgbG9zIG9iamV0aXZvcyBkZWwgbmVnb2NpbyB5IGxhIGNhcGFjaWRhZCB0w6ljbmljYSBkZWwgZXF1aXBvLiBBY3TDumEgY29tbyB1biBwdWVudGUgZXN0cmF0w6lnaWNvIHF1ZSB0cmFkdWNlIGxhIHZpc2nDs24gZGVsIG5lZ29jaW8gZW4gZXNwZWNpZmljYWNpb25lcyBxdWUgZWwgZXF1aXBvIHB1ZWRhIGNvbnN0cnVpciwgc2luIHBlcmRlciBkZSB2aXN0YSBsb3MgaW50ZXJlc2VzIGRlIGxvcyB1c3VhcmlvcyBmaW5hbGVzLgoKICAgIC8vIEJsb3F1ZTogYmctZnVsbC1pY29uby10ZXh0bwogICAgLmJnLWZ1bGwtd2lkdGguYmctY29sb3ItMy5tYi01LnRleHQtd2hpdGUKICAgICAgLnB4LTQucHgtbWQtNS5weS00CiAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS81LnN2ZyIsIHN0eWxlPSJtYXgtd2lkdGg6IDkwcHgiKS5teC1hdXRvCiAgICAgICAgICAuY29sLWxnCiAgICAgICAgICAgIHAubWItMCAjW3N0cm9uZyBFamVtcGxvIGFwbGljYWRvLl0gVW5hIGVtcHJlc2EgZGUgZS1jb21tZXJjZSBxdWllcmUgZGVzYXJyb2xsYXIgdW5hIG51ZXZhIGZ1bmNpb25hbGlkYWQgZGUgInJlY29tZW5kYWNpb25lcyBwZXJzb25hbGl6YWRhcyIuIEVsIFByb2R1Y3QgT3duZXIgZXZhbMO6YSBxdWUsIGF1bnF1ZSBlc3RhIGZ1bmNpw7NuIHBvZHLDrWEgbWVqb3JhciBsYSByZXRlbmNpw7NuLCBzdSBkZXNhcnJvbGxvIGluaWNpYWwgc2Vyw61hIGNvc3Rvc28uIERlY2lkZSBwcmlvcml6YXIgcHJpbWVybyBtZWpvcmFzIGVuIGVsIHRpZW1wbyBkZSBjYXJnYSBkZWwgc2l0aW8sIGJhc8OhbmRvc2UgZW4gbcOpdHJpY2FzIHJlYWxlcyBkZSBhYmFuZG9uby4gRXN0YSBkZWNpc2nDs24gcGVybWl0ZSBtYXhpbWl6YXIgZWwgdmFsb3IgY29uIHJlY3Vyc29zIGxpbWl0YWRvcywgZGVtb3N0cmFuZG8gbGEgaW1wb3J0YW5jaWEgZGUgdW4gUE8gZXN0cmF0w6lnaWNvLgoKICAgIC8vIEJsb3F1ZTogdGl0dWxvLXNlZ3VuZG8KICAgICN0XzFfMi50aXR1bG8tc2VndW5kbyhkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgIGgyICNbc3BhbiAxLjJdIEZ1bmNpb25lcyBkZWwgI1tlbSBTY3J1bSBNYXN0ZXJdCgogICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikubWItNCBFbCAjW2VtIFNjcnVtIE1hc3Rlcl0gKFNNKSBubyBlcyB1biBqZWZlIG5pIHVuIGdlc3RvciBkZSBwZXJzb25hcywgc2lubyB1biBmYWNpbGl0YWRvciBkZWwgcHJvY2VzbyBTY3J1bS4gU3Ugcm9sIGVzIHZlbGFyIHBvciBsYSBjb21wcmVuc2nDs24gZSBpbXBsZW1lbnRhY2nDs24gZWZlY3RpdmEgZGVsIG1hcmNvIGRlIHRyYWJham8geSBlbGltaW5hciBsb3Mgb2JzdMOhY3Vsb3MgcXVlIGltcGlkZW4gZWwgYXZhbmNlIGRlbCBlcXVpcG8uIEFjdMO6YSBjb21vIHVuIG1lbnRvciwgdW4gY29hY2ggeSwgZW4gbXVjaG9zIGNhc29zLCBjb21vIHVuIHByb3RlY3RvciBkZWwgZXF1aXBvIGZyZW50ZSBhIGxhcyBpbnRlcnJ1cGNpb25lcyBleHRlcm5hcyBvIGRpbsOhbWljYXMgZGlzZnVuY2lvbmFsZXMgKE1vbnRlIEdhbGlhbm8sIDIwMTYpLgoKICAgIHAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLm1iLTUgQ29ub3pjYW1vcyBzdXMgZnVuY2lvbmVzOgoKICAgIC8vIEJsb3F1ZTogVGFic0MKICAgIFRhYnNDLmNvbG9yLWFjZW50by1jb250ZW5pZG8ubWItNQogICAgICAudGFicy1jb250ZW50LmJvcmRlci5weC00LnAtbWQtNS5weS0zKHRpdHVsbz0iR2FyYW50aXphciBsYSBhZGhlcmVuY2lhIGFsIG1hcmNvIGRlIFNjcnVtIiA6aWNvbj0icmVxdWlyZSgnQC9hc3NldHMvYnVsbGV0cy9pY29uLXRhYi1jLTEuc3ZnJykiKQogICAgICAgIC5yb3cKICAgICAgICAgIC5jb2wtbWQtNi5jb2wtbGctNy5jb2wteGwtOC5tYi00Lm1iLW1kLTAub3JkZXItMgogICAgICAgICAgICBoNCBHYXJhbnRpemFyIGxhIGFkaGVyZW5jaWEgYWwgbWFyY28gZGUgU2NydW0KICAgICAgICAgICAgcCBVbm8gZGUgbG9zIGVycm9yZXMgbcOhcyBjb211bmVzIGVuIGxhcyBvcmdhbml6YWNpb25lcyBlcyAiYWRhcHRhciBTY3J1bSIgZGUgZm9ybWEgaW5jb3JyZWN0YSwgZWxpbWluYW5kbyBldmVudG9zIGNsYXZlcyBvIGZ1c2lvbmFuZG8gcm9sZXMuIEVsIFNjcnVtIE1hc3RlciBkZWJlIGdhcmFudGl6YXIgcXVlIGVsIGVxdWlwbyByZXNwZXRlIGxvcyBwaWxhcmVzIGRlIFNjcnVtOiB0cmFuc3BhcmVuY2lhLCBpbnNwZWNjacOzbiB5IGFkYXB0YWNpw7NuLCB5IHF1ZSBwcmFjdGlxdWUgbG9zIHZhbG9yZXMgZGUgY29tcHJvbWlzbywgY29yYWplLCBmb2NvLCBhcGVydHVyYSB5IHJlc3BldG8uCiAgICAgICAgICAuY29sLW1kLTYuY29sLWxnLTUuY29sLXhsLTQub3JkZXItMQogICAgICAgICAgICBmaWd1cmUoZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWExLzYucG5nJywgYWx0PScnKQoKICAgICAgLnRhYnMtY29udGVudC5ib3JkZXIucHgtNC5wLW1kLTUucHktMyh0aXR1bG89IkZvbWVudGFyIGxhIG1lam9yYSBjb250aW51YSIgOmljb249InJlcXVpcmUoJ0AvYXNzZXRzL2J1bGxldHMvaWNvbi10YWItYy0xLnN2ZycpIikKICAgICAgICAucm93CiAgICAgICAgICAuY29sLW1kLTYuY29sLWxnLTcuY29sLXhsLTgubWItNC5tYi1tZC0wLm9yZGVyLTIKICAgICAgICAgICAgaDQgRm9tZW50YXIgbGEgbWVqb3JhIGNvbnRpbnVhCiAgICAgICAgICAgIHAgRW4gY2FkYSBpdGVyYWNpw7NuLCBlbCBlcXVpcG8gZGViZSBhcHJlbmRlciB5IG1lam9yYXIuIEVsIFNNIGZhY2lsaXRhIHNlc2lvbmVzIGRlIHJldHJvc3BlY3RpdmEsIGRvbmRlIHNlIGFuYWxpemFuIGFjaWVydG9zIHkgZXJyb3JlcywgeSBzZSBwbGFudGVhbiBtZWpvcmFzIGNvbmNyZXRhcy4gRXN0ZSBlbmZvcXVlIHByb211ZXZlIHVuYSBjdWx0dXJhIG9yZ2FuaXphY2lvbmFsIG9yaWVudGFkYSBhbCBhcHJlbmRpemFqZSwgdW5hIHZlbnRhamEgY29tcGV0aXRpdmEgZW4gbWVyY2Fkb3Mgdm9sw6F0aWxlcy4KICAgICAgICAgIC5jb2wtbWQtNi5jb2wtbGctNS5jb2wteGwtNC5vcmRlci0xCiAgICAgICAgICAgIGZpZ3VyZShkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTEvNy5wbmcnLCBhbHQ9JycpCgogICAgICAudGFicy1jb250ZW50LmJvcmRlci5weC00LnAtbWQtNS5weS0zKHRpdHVsbz0iUmVtb2Npw7NuIGRlIGltcGVkaW1lbnRvcyIgOmljb249InJlcXVpcmUoJ0AvYXNzZXRzL2J1bGxldHMvaWNvbi10YWItYy0xLnN2ZycpIikKICAgICAgICAucm93CiAgICAgICAgICAuY29sLW1kLTYuY29sLWxnLTcuY29sLXhsLTgubWItNC5tYi1tZC0wLm9yZGVyLTIKICAgICAgICAgICAgaDQgUmVtb2Npw7NuIGRlIGltcGVkaW1lbnRvcwogICAgICAgICAgICBwIEVsIFNNIGlkZW50aWZpY2EgeSBlbGltaW5hIHRvZG8gYXF1ZWxsbyBxdWUgaW1waWRlIGFsIGVxdWlwbyBhbGNhbnphciBzdXMgbWV0YXM6IGN1ZWxsb3MgZGUgYm90ZWxsYSwgaGVycmFtaWVudGFzIGluZWZpY2llbnRlcywgY29uZmxpY3RvcyBpbnRlcm5vcyBvIGRlcGVuZGVuY2lhcyBleHRlcm5hcy4gRXN0YSBmdW5jacOzbiwgYXVucXVlIG11Y2hhcyB2ZWNlcyBpbnZpc2libGUsIHRpZW5lIHVuIGltcGFjdG8gZGlyZWN0byBlbiBsYSBwcm9kdWN0aXZpZGFkIHkgbW90aXZhY2nDs24gZGVsIGVxdWlwby4KICAgICAgICAgIC5jb2wtbWQtNi5jb2wtbGctNS5jb2wteGwtNC5vcmRlci0xCiAgICAgICAgICAgIGZpZ3VyZShkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTEvOC5wbmcnLCBhbHQ9JycpCgogICAgLy8gQmxvcXVlOiBiZy1mdWxsLWljb25vLXRleHRvCiAgICAuYmctZnVsbC13aWR0aC5iZy1jb2xvci0zLm1iLTUudGV4dC13aGl0ZQogICAgICAucHgtNC5weC1tZC01LnB5LTQKICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExLzkuc3ZnIiwgc3R5bGU9Im1heC13aWR0aDogOTBweCIpLm14LWF1dG8KICAgICAgICAgIC5jb2wtbGcKICAgICAgICAgICAgcC5tYi0wICNbc3Ryb25nIEVqZW1wbG8gYXBsaWNhZG8uXSBFbiB1biBlcXVpcG8gZGUgZGVzYXJyb2xsbyBkZSBhcGxpY2FjaW9uZXMgbcOzdmlsZXMsIHNlIGRldGVjdGEgcXVlIGxhcyBwcnVlYmFzIGRlIGNhbGlkYWQgc2UgcmVhbGl6YW4gbWFudWFsbWVudGUgeSBjb25zdW1lbiBkZW1hc2lhZG8gdGllbXBvLiBFbCBTY3J1bSBNYXN0ZXIgcHJvcG9uZSBpbXBsZW1lbnRhciBoZXJyYW1pZW50YXMgZGUgaW50ZWdyYWNpw7NuIGNvbnRpbnVhIHkgYXV0b21hdGl6YWNpw7NuIGRlIHBydWViYXMuIEVzdGEgYWNjacOzbiByZWR1Y2UgZWwgdGllbXBvIGRlIGVudHJlZ2EgeSBtZWpvcmEgbGEgY2FsaWRhZCwgZWplbXBsaWZpY2FuZG8gY8OzbW8gZWwgU2NydW0gTWFzdGVyIGF1bWVudGEgZWwgdmFsb3Igc2luIGVzY3JpYmlyIHVuYSBzb2xhIGzDrW5lYSBkZSBjw7NkaWdvLgoKICAgIC8vIEJsb3F1ZTogdGl0dWxvLXNlZ3VuZG8KICAgICN0XzFfMy50aXR1bG8tc2VndW5kbyhkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgIGgyICNbc3BhbiAxLjNdIEludGVyYWNjacOzbiBlbnRyZSByb2xlcyBTY3J1bQoKICAgIHAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLm1iLTQgVW5hIGltcGxlbWVudGFjacOzbiBlZmVjdGl2YSBkZSBTY3J1bSBubyBzb2xvIGRlcGVuZGUgZGUgcXVlIGNhZGEgcm9sIHJlYWxpY2Ugc3UgdHJhYmFqbywgc2lubyBkZSBxdWUgZXhpc3RhIHVuYSBkaW7DoW1pY2Egc2FsdWRhYmxlIGRlIGNvbGFib3JhY2nDs24gZW50cmUgZWxsb3MuIENhZGEgdW5vIGFwb3J0YSBkZXNkZSB1bmEgcGVyc3BlY3RpdmEgZGlzdGludGEsIHBlcm8gc3Ugc2luZXJnaWEgZXMgbG8gcXVlIHBlcm1pdGUgZW50cmVnYXIgdmFsb3IgZGUgbWFuZXJhIGNvbnN0YW50ZSBlIGluY3JlbWVudGFsLgoKICAgIHAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLm1iLTUgQ29ub3pjYW1vcyBzdXMgZnVuY2lvbmVzOgoKICAgIC8vIEJsb3F1ZTogYWNvcmRlb24taW1nIDg6NAogICAgLnJvdy5hbGlnbi1pdGVtcy1zdGFydC5tYi01CiAgICAgIC5jb2wtbGctOAogICAgICAgIEFjb3JkaW9uQSh0aXBvPSJiIikKICAgICAgICAgIC5kaXYodGl0dWxvPSJQcm9kdWN0IE93bmVyIHkgRXF1aXBvIGRlIERlc2Fycm9sbG8iKQogICAgICAgICAgICBwIEVzdGEgcmVsYWNpw7NuIGRlYmUgYmFzYXJzZSBlbiBsYSBjb25maWFuemEgbXV0dWEuIEVsIFBPIGNvbmbDrWEgZW4gcXVlIGVsIGVxdWlwbyB0aWVuZSBsYSBjYXBhY2lkYWQgdMOpY25pY2EgcGFyYSBlamVjdXRhciwgbWllbnRyYXMgcXVlIGVsIGVxdWlwbyBjb25mw61hIGVuIHF1ZSBlbCBQTyBwcmlvcml6YSBjb24gY3JpdGVyaW8uIEVsIGRpw6Fsb2dvIGVudHJlIGFtYm9zIGRlYmUgc2VyIGNvbnRpbnVvOiBkZXNkZSBlbCByZWZpbmFtaWVudG8gZGVsIGJhY2tsb2cgaGFzdGEgbGEgcmV2aXNpw7NuIGRlIGVudHJlZ2FzLgoKICAgICAgICAgIC5kaXYodGl0dWxvPSJTY3J1bSBNYXN0ZXIgeSBQcm9kdWN0IE93bmVyIikKICAgICAgICAgICAgcCBBdW5xdWUgYW1ib3Mgcm9sZXMgc29uIGNvbXBsZW1lbnRhcmlvcywgcHVlZGVuIHN1cmdpciB0ZW5zaW9uZXMuIFBvciBlamVtcGxvLCBlbCBQTyBwdWVkZSBxdWVyZXIgY2FtYmlvcyBkdXJhbnRlIGVsIFNwcmludCwgbWllbnRyYXMgcXVlIGVsIFNNIHByb3RlZ2UgbGEgZXN0YWJpbGlkYWQgZGVsIFNwcmludC4gRXN0YXMgc2l0dWFjaW9uZXMgZGViZW4gcmVzb2x2ZXJzZSBkZXNkZSBlbCBlbnRlbmRpbWllbnRvIGRlIHF1ZSBhbWJvcyBidXNjYW4gbG8gbWlzbW86IG1heGltaXphciBlbCB2YWxvciBlbnRyZWdhZG8uCgogICAgICAgICAgLmRpdih0aXR1bG89IlNjcnVtIE1hc3RlciB5IEVxdWlwbyBkZSBEZXNhcnJvbGxvIikKICAgICAgICAgICAgcCBFbCBTTSBlcyB1biBhcG95byBjb25zdGFudGUgcGFyYSBlbCBlcXVpcG8uIE5vIGRpcmlnZSwgc2lubyBxdWUgZW1wb2RlcmEuIEJyaW5kYSBoZXJyYW1pZW50YXMsIGZvbWVudGEgbGEgYXV0b25vbcOtYSwgbWVkaWEgZW4gY29uZmxpY3RvcyB5IGNvbnN0cnV5ZSB1biBlbnRvcm5vIHNlZ3VybyBwYXJhIGV4cGVyaW1lbnRhciB5IGFwcmVuZGVyLiBDdWFuZG8gZXN0YSByZWxhY2nDs24gZXMgZnVlcnRlLCBsb3MgZXF1aXBvcyBhbGNhbnphbiBuaXZlbGVzIGFsdG9zIGRlIHJlbmRpbWllbnRvIHkgc2F0aXNmYWNjacOzbi4KCiAgICAgIC5jb2wtbGctNAogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvMTAucG5nIiwgYWx0PSIiKS5tYi00Lm1iLWxnLTAKCiAgICAvLyBCbG9xdWU6IGltYWdlbi10ZXh0by1pY29ub2Jsb3F1ZSA0OjgKICAgIC5yb3cubWItNQogICAgICAvLy0gLmNvbC1sZy0zCiAgICAgIC8vLSAgIGZpZ3VyZQogICAgICAvLy0gICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExLzExLnBuZyIsIGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgLmNvbC1sZwogICAgICAgIHAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLm1iLTQgI1tzdHJvbmcgRWplbXBsbyBhcGxpY2Fkby5dIER1cmFudGUgdW5hIHJldHJvc3BlY3RpdmEsIGVsIGVxdWlwbyBleHByZXNhIHF1ZSBsYXMgaGlzdG9yaWFzIGVzdMOhbiBtYWwgZGVmaW5pZGFzIHkgcmVxdWllcmVuIG3Dumx0aXBsZXMgYWNsYXJhY2lvbmVzLiBFbCBTY3J1bSBNYXN0ZXIgcHJvcG9uZSBpbmNsdWlyIHNlc2lvbmVzIGRlIHJlZmluYW1pZW50byBjb24gZWwgUHJvZHVjdCBPd25lciBhbnRlcyBkZSBjYWRhIFNwcmludCBQbGFubmluZy4gRXN0YSBkZWNpc2nDs24gbWVqb3JhIGxhIGNsYXJpZGFkLCByZWR1Y2UgZWwgZGVzcGVyZGljaW8geSBmb3J0YWxlY2UgbGEgY29sYWJvcmFjacOzbiBlbnRyZSByb2xlcy4KCiAgICAgICAgLmJnLWNvbG9yLTYucC00KGRhdGEtYW9zPSJmYWRlLWxlZnQiKQogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1zdGFydAogICAgICAgICAgICAuY29sLWxnLWF1dG8KICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS8xMi5zdmciLCBzdHlsZT0ibWF4LXdpZHRoOiA5MHB4IikubXgtYXV0bwogICAgICAgICAgICAuY29sLWxnCiAgICAgICAgICAgICAgcC5tYi0wIExvcyByb2xlcyBlbiBTY3J1bSBubyBzb24gamVyw6FycXVpY29zIG5pIHLDrWdpZG9zLiBTb24gZXN0cnVjdHVyYXMgZGUgY29sYWJvcmFjacOzbiBkaW7DoW1pY2EgcXVlLCBjdWFuZG8gc2UgZW50aWVuZGVuIHkgc2UgZWplcmNlbiBjb3JyZWN0YW1lbnRlLCB0cmFuc2Zvcm1hbiBsYSBtYW5lcmEgZW4gcXVlIHNlIGNvbmNpYmVuIHkgZW50cmVnYW4gcHJvZHVjdG9zLiBMYSBjbGFyaWRhZCBlbiBsYXMgZnVuY2lvbmVzLCBsYSBmbHVpZGV6IGVuIGxhIGludGVyYWNjacOzbiB5IGVsIHJlc3BldG8gcG9yIGxvcyB2YWxvcmVzIMOhZ2lsZXMgY29uc3RpdHV5ZW4gbGEgYmFzZSBkZSB1biBlcXVpcG8gU2NydW0gZXhpdG9zby4gRXN0YSBjb21wcmVuc2nDs24gbm8gc29sbyBlcyDDunRpbCBlbiBwcm95ZWN0b3MgZGUgc29mdHdhcmUsIHNpbm8gZW4gY3VhbHF1aWVyIGVudG9ybm8gcXVlIGRlbWFuZGUgaW5ub3ZhY2nDs24sIGFkYXB0YWJpbGlkYWQgeSBlbnRyZWdhIGNvbnRpbnVhIGRlIHZhbG9yLgoKICAgIC8vIEJsb3F1ZTogbWF0ZXJpYWwtY29tcGxlbWVudGFyaW8KICAgIC5iZy1mdWxsLXdpZHRoLmJvcmRlci10b3AuY29sb3ItcHJpbWFyaW8KICAgICAgLnAtNC5wLW1kLTUKICAgICAgICBoMihkYXRhLWFvcz0iZmFkZS1sZWZ0IikgTUFURVJJQUwgQ09NUExFTUVOVEFSSU8KICAgICAgICAucm93Lm1hdGVyaWFsLWNvbXBsZW1lbnRhcmlvCiAgICAgICAgICAuY29sLTEyLmNvbC1tZC02LmNvbC1sZy03CiAgICAgICAgICAgIHAgTG9zIGludml0YW1vcyBhIGV4cGxvcmFyIGVsIG1hdGVyaWFsIGNvbXBsZW1lbnRhcmlvIGRlIGVzdGUgY3Vyc28sIGVuIGVzdGEgc2VjY2nDs24gZW5jb250cmFyw6EgcmVjdXJzb3MgcXVlIGxlIHBlcm1pdGlyw6FuIHByb2Z1bmRpemFyIHkgZW5yaXF1ZWNlciBzdSBhcHJlbmRpemFqZSBlbiBsb3MgdGVtYXMgdHJhdGFkb3MgZW4gZXN0YSB1bmlkYWQuCiAgICAgICAgICAgIAogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy9jb21wb25lbnRlcy9saW5rLnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgYShocmVmPSJodHRwczovL2VsaWJyby5uZXQvZXMvbGMvdGVjbm9sb2dpY2FkZWxvcmllbnRlL3RpdHVsb3MvMjg5OTMiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBFc2NhbG9uYSwgSS4gKDIwMDkpLiBQbGFuZWFjacOzbiBpbnRlZ3JhbCBhZ3JlZ2FkYSBlIGludGVycmVsYWNpw7NuIGRlIGxvcyBzaXN0ZW1hcyBpbnRlcm1pdGVudGVzIGNvbiBlbCBNUlAgeSBmaWxvc29mw61hIEpJVCwga2FuYmFuLCByZWluZ2VuaWVyw61hLiBFbCBDaWQgRWRpdG9yLiAKICAgICAgICAgICAgCiAgICAgICAgICAgIHAuZC1mbGV4Lm15LTQKICAgICAgICAgICAgICBpbWcubWUtMyhzcmM9J0AvYXNzZXRzL3RlbXBsYXRlL2ljb25vLXl0LnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgYShocmVmPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PVVqY0FKM3RqZzhvIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciBub3JlZmVycmVyIikgTXVqZXIgQ3Jvbm9waW8uICgyMDIyKS4gQUdJTEUgTUFOSUZFU1RPIFsxLzRdLiDCv1NvbG8gcGFyYSBpbmdlbmllcm9zPyDCoU5PISBbdmlkZW9dLiBZb3VUdWJlLgogICAgICAgICAgICAKICAgICAgICAgIC5jb2wtMTIuY29sLW1kLTYuY29sLWxnLTMub2Zmc2V0LWxnLTEKICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY29tcG9uZW50ZXMvbWF0ZXJpYWwtY29tcGxlbWVudGFyaW8uc3ZnJywgYWx0PSdJbWFnZW4gbWF0ZXJpYWwgY29tcGxlbWVudGFyaW8nKQoK"},null]}