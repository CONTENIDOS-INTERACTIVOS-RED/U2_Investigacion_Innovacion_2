{"remainingRequest":"/home/runner/work/U2_Investigacion_Innovacion_2/U2_Investigacion_Innovacion_2/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Investigacion_Innovacion_2/U2_Investigacion_Innovacion_2/src/views/curso/Tema3.vue?vue&type=template&id=0b6faece&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Investigacion_Innovacion_2/U2_Investigacion_Innovacion_2/src/views/curso/Tema3.vue","mtime":1759207535551},{"path":"/home/runner/work/U2_Investigacion_Innovacion_2/U2_Investigacion_Innovacion_2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Investigacion_Innovacion_2/U2_Investigacion_Innovacion_2/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Investigacion_Innovacion_2/U2_Investigacion_Innovacion_2/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Investigacion_Innovacion_2/U2_Investigacion_Innovacion_2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Investigacion_Innovacion_2/U2_Investigacion_Innovacion_2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubyg6c3ViVGl0dWxvPSInMy4gSGVycmFtaWVudGFzIGRlIHNlZ3VpbWllbnRvJyIpCiAgLmNvbnRhaW5lci50YXJqZXRhLnRhcmpldGEtLWJsYW5jYS5wLTQucC1tZC01Lm92ZXJmbG93LWhpZGRlbgoKICAgIC8vIEJsb3F1ZTogYmxvcXVlLWltZwogICAgLmJnLWNvbG9yLTEubWItNShkYXRhLWFvcz0iZmFkZS11cCIpCiAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAuY29sLWxnLWF1dG8KICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMy8xLnBuZycsIGFsdD0nJykKICAgICAgICAuY29sLWxnCiAgICAgICAgICAucC00CiAgICAgICAgICAgIHAubWItMChkYXRhLWFvcz0iZmFkZS11cCIpIEVuIGVsIGRlc2Fycm9sbG8gZGUgc29mdHdhcmUgw6FnaWwsIGVsIHNlZ3VpbWllbnRvIGVmaWNpZW50ZSBkZWwgdHJhYmFqbyBlcyBlc2VuY2lhbCBwYXJhIG1hbnRlbmVyIGxhIHRyYW5zcGFyZW5jaWEsIHByaW9yaXphciB0YXJlYXMsIGdlc3Rpb25hciB0aWVtcG9zIHkgZmFjaWxpdGFyIGxhIGNvbGFib3JhY2nDs24gZGVsIGVxdWlwby4gRW4gZXN0ZSBjb250ZXh0bywgaGVycmFtaWVudGFzIGNvbW8gSklSQSB5IFRyZWxsbywgc2UgaGFuIGNvbnNvbGlkYWRvIGNvbW8gcGxhdGFmb3JtYXMgY2xhdmVzIHF1ZSBwZXJtaXRlbiBpbXBsZW1lbnRhciBwcsOhY3RpY2FzIGRlIFNjcnVtIHkgb3RyYXMgbWV0b2RvbG9nw61hcyDDoWdpbGVzIGRlIGZvcm1hIGVzdHJ1Y3R1cmFkYSAoQ2FzdGlsbG8sIDIwMTApLgoKICAgIC8vIEJsb3F1ZTogdGl0dWxvLXNlZ3VuZG8KICAgICN0XzNfMS50aXR1bG8tc2VndW5kbyhkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgIGgyICNbc3BhbiAzLjFdIFVzbyBkZSBKSVJBIGVuIFNjcnVtCgogICAgLy8gQmxvcXVlOiB0ZXh0by1jb2xvci1pbWFnZW4gODo0CiAgICAucm93Lm1iLTUKICAgICAgLmNvbC1sZy04CiAgICAgICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikubWItNSBKSVJBIGVzIHVuYSBoZXJyYW1pZW50YSBkZXNhcnJvbGxhZGEgcG9yIEF0bGFzc2lhbiwgZXNwZWNpYWxpemFkYSBlbiBsYSBnZXN0acOzbiBkZSBwcm95ZWN0b3Mgw6FnaWxlcy4gUGVybWl0ZSBvcmdhbml6YXIgU3ByaW50cywgZ2VzdGlvbmFyIGhpc3RvcmlhcyBkZSB1c3VhcmlvLCBwbGFuaWZpY2FyIHJlbGVhc2VzLCBhdXRvbWF0aXphciBmbHVqb3MgZGUgdHJhYmFqbyB5IGdlbmVyYXIgcmVwb3J0ZXMgZGUgcmVuZGltaWVudG8uCgogICAgICAgIC5iZy1jb2xvci02LnAtNChkYXRhLWFvcz0iZmFkZS1sZWZ0IikKICAgICAgICAgIHAubWItNCAjW3N0cm9uZyBWZW50YWphcyBkZSBKSVJBIHBhcmEgU2NydW06XQogICAgICAgICAgdWwubGlzdGEtdWwtLWNvbG9yLmNvbG9yLWRhcmsKICAgICAgICAgICAgbGkubWItMAogICAgICAgICAgICAgIGkuZmFzLmZhLWFycm93LWNpcmNsZS1yaWdodAogICAgICAgICAgICAgIHwgR2VzdGnDs24gZGV0YWxsYWRhIGRlbCBiYWNrbG9nIGRlIHByb2R1Y3RvLgogICAgICAgICAgICBsaS5tYi0wCiAgICAgICAgICAgICAgaS5mYXMuZmEtYXJyb3ctY2lyY2xlLXJpZ2h0CiAgICAgICAgICAgICAgfCBTZWd1aW1pZW50byB2aXN1YWwgZGUgbGFzIHRhcmVhcyBwb3IgU3ByaW50LgogICAgICAgICAgICBsaS5tYi0wCiAgICAgICAgICAgICAgaS5mYXMuZmEtYXJyb3ctY2lyY2xlLXJpZ2h0CiAgICAgICAgICAgICAgfCBBdXRvbWF0aXphY2nDs24gZGUgZmx1am9zIGRlIHRyYWJham8uCiAgICAgICAgICAgIGxpLm1iLTAKICAgICAgICAgICAgICBpLmZhcy5mYS1hcnJvdy1jaXJjbGUtcmlnaHQKICAgICAgICAgICAgICB8IEludGVncmFjacOzbiBjb24gaGVycmFtaWVudGFzIGRlIGRlc2Fycm9sbG8gKEJpdGJ1Y2tldCwgR2l0SHViKS4KICAgICAgICAgICAgbGkubWItMAogICAgICAgICAgICAgIGkuZmFzLmZhLWFycm93LWNpcmNsZS1yaWdodAogICAgICAgICAgICAgIHwgSW5mb3JtZXMgw6FnaWxlcyAjW2VtIChidXJuZG93biBjaGFydCwgdmVsb2NpdHkgY2hhcnQsIGNvbnRyb2wgY2hhcnQpXS4KICAgICAgLmNvbC1sZy00CiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMy8yLnBuZyIsIGRhdGEtYW9zPSJ6b29tLWluIikKCiAgICAvLyBCbG9xdWU6IFTDrXR1bG8gc2ltcGxlCiAgICBoMi5tYi00IEVqZW1wbG8gcHLDoWN0aWNvIHBhc28gYSBwYXNvCiAgICBwIENvbmZpZ3VyYWNpw7NuIGRlIHVuIFNwcmludCBlbiBKSVJBLgoKICAgIC8vIEJsb3F1ZTogaW1nLWFjb3JkZW9uCiAgICAucm93LmFsaWduLWl0ZW1zLXN0YXJ0Lm1iLTUKICAgICAgLmNvbC1sZy00CiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMy8zLnBuZyIsIGFsdD0iIikubWItNC5tYi1sZy0wCiAgICAgIC5jb2wtbGctOAogICAgICAgIEFjb3JkaW9uQSh0aXBvPSJiIikKICAgICAgICAgIC5kaXYodGl0dWxvPSJQYXNvIDEgLSBDcmVhciB1biBwcm95ZWN0byBTY3J1bSIpCiAgICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvci5jb2xvci1kYXJrCiAgICAgICAgICAgICAgbGkubWItMAogICAgICAgICAgICAgICAgaS5mYXMuZmEtYXJyb3ctY2lyY2xlLXJpZ2h0CiAgICAgICAgICAgICAgICB8IFNlIHNlbGVjY2lvbmEgZWwgdGlwbyBkZSBwcm95ZWN0byAiU2NydW0gc29mdHdhcmUgZGV2ZWxvcG1lbnQiLgogICAgICAgICAgICAgIGxpLm1iLTAKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWFycm93LWNpcmNsZS1yaWdodAogICAgICAgICAgICAgICAgfCBTZSBhc2lnbmEgdW4gbm9tYnJlIGFsIHByb3llY3RvLCBjb21vICJEZXNhcnJvbGxvIFBsYXRhZm9ybWEgRS1jb21tZXJjZSIuCgogICAgICAgICAgLmRpdih0aXR1bG89IlBhc28gMiAtIENvbnN0cnVjY2nDs24gZGVsIFByb2R1Y3QgQmFja2xvZyIpCiAgICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvci5jb2xvci1kYXJrCiAgICAgICAgICAgICAgbGkubWItMAogICAgICAgICAgICAgICAgaS5mYXMuZmEtYXJyb3ctY2lyY2xlLXJpZ2h0CiAgICAgICAgICAgICAgICB8IFNlIGluZ3Jlc2FuIGxhcyBoaXN0b3JpYXMgZGUgdXN1YXJpbyBzaWd1aWVuZG8gZWwgZm9ybWF0bzogIkNvbW8gW3JvbF0sIHF1aWVybyBbYWNjacOzbl0gcGFyYSBbYmVuZWZpY2lvXSIuCiAgICAgICAgICAgICAgbGkubWItMAogICAgICAgICAgICAgICAgaS5mYXMuZmEtYXJyb3ctY2lyY2xlLXJpZ2h0CiAgICAgICAgICAgICAgICB8ICNbc3Ryb25nIEVqZW1wbG9dLiAiQ29tbyBjbGllbnRlLCBxdWllcm8gdmVyIGVsIGhpc3RvcmlhbCBkZSBtaXMgcGVkaWRvcyBwYXJhIGdlc3Rpb25hciBtaXMgY29tcHJhcy4iCgogICAgICAgICAgLmRpdih0aXR1bG89IlBhc28gMyAtIFBsYW5pZmljYWNpw7NuIGRlbCBTcHJpbnQiKQogICAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IuY29sb3ItZGFyawogICAgICAgICAgICAgIGxpLm1iLTAKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWFycm93LWNpcmNsZS1yaWdodAogICAgICAgICAgICAgICAgfCBTZSBzZWxlY2Npb25hbiBoaXN0b3JpYXMgZGVsIGJhY2tsb2cgeSBzZSBhZ3JlZ2FuIGFsIFNwcmludCBhY3R1YWwuCiAgICAgICAgICAgICAgbGkubWItMAogICAgICAgICAgICAgICAgaS5mYXMuZmEtYXJyb3ctY2lyY2xlLXJpZ2h0CiAgICAgICAgICAgICAgICB8IFNlIGVzdGltYSBlbCBlc2Z1ZXJ6byBjb24gcHVudG9zIGRlIGhpc3RvcmlhLgoKICAgICAgICAgIC5kaXYodGl0dWxvPSJQYXNvIDQgLSBJbmljaW8gZGVsIFNwcmludCIpCiAgICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvci5jb2xvci1kYXJrCiAgICAgICAgICAgICAgbGkubWItMAogICAgICAgICAgICAgICAgaS5mYXMuZmEtYXJyb3ctY2lyY2xlLXJpZ2h0CiAgICAgICAgICAgICAgICB8IFNlIGRlZmluZSBkdXJhY2nDs24gKHBvciBlamVtcGxvLCAyIHNlbWFuYXMpIHkgc2UgYXNpZ25hbiB0YXJlYXMgYSBsb3MgbWllbWJyb3MgZGVsIGVxdWlwby4KICAgICAgICAgICAgICBsaS5tYi0wCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1hcnJvdy1jaXJjbGUtcmlnaHQKICAgICAgICAgICAgICAgIHwgU2UgdmlzdWFsaXphIGVsIHRhYmxlcm8gdGlwbyBrYW5iYW4gcXVlIG11ZXN0cmEgZWwgcHJvZ3Jlc286IFRvIERvIOKAkyBJbiBQcm9ncmVzcyDigJMgRG9uZS4KCiAgICAgICAgICAuZGl2KHRpdHVsbz0iUGFzbyA1IC0gU2VndWltaWVudG8iKQogICAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IuY29sb3ItZGFyawogICAgICAgICAgICAgIGxpLm1iLTAKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWFycm93LWNpcmNsZS1yaWdodAogICAgICAgICAgICAgICAgfCBTZSByZWFsaXphbiBEYWlseSBTdGFuZC11cHMgY29uIGVsIHRhYmxlcm8gdmlzaWJsZSBwYXJhIHJldmlzYXIgYmxvcXVlb3MuCiAgICAgICAgICAgICAgbGkubWItMAogICAgICAgICAgICAgICAgaS5mYXMuZmEtYXJyb3ctY2lyY2xlLXJpZ2h0CiAgICAgICAgICAgICAgICB8IFNlIGNvbnN1bHRhbiBncsOhZmljb3MgY29tbyBlbCBCdXJuZG93biBDaGFydCBwYXJhIHJldmlzYXIgbGEgdGVuZGVuY2lhIGRlIGZpbmFsaXphY2nDs24gZGUgdGFyZWFzLgoKICAgIC8vIEJsb3F1ZTogdGl0dWxvLXNlZ3VuZG8KICAgICN0XzNfMi50aXR1bG8tc2VndW5kbyhkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgIGgyICNbc3BhbiAzLjJdIFRyZWxsbyBwYXJhIGVxdWlwb3Mgw6FnaWxlcwoKICAgIC8vIEJsb3F1ZTogdGV4dG8tY29sb3ItaW1hZ2VuCiAgICAucm93Lm1iLTUKICAgICAgLmNvbC1sZy04CiAgICAgICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikubWItNSBUcmVsbG8sIHRhbWJpw6luIHByb3BpZWRhZCBkZSBBdGxhc3NpYW4sIGVzIHVuYSBoZXJyYW1pZW50YSBkZSBnZXN0acOzbiB2aXN1YWwgYmFzYWRhIGVuIGVsIHNpc3RlbWEgS2FuYmFuLiBBdW5xdWUgbm8gZXN0w6EgZGlzZcOxYWRhIGVzcGVjw61maWNhbWVudGUgcGFyYSBTY3J1bSwgc3Ugc2ltcGxpY2lkYWQgeSBmbGV4aWJpbGlkYWQgbGEgaGFjZW4gaWRlYWwgcGFyYSBwZXF1ZcOxb3MgZXF1aXBvcyDDoWdpbGVzIG8gc3RhcnR1cHMuCgogICAgICAgIC5iZy1jb2xvci0xLnAtNChkYXRhLWFvcz0iZmFkZS1sZWZ0IikKICAgICAgICAgIHAubWItNCAjW3N0cm9uZyBQcmluY2lwYWxlcyBjYXJhY3RlcsOtc3RpY2FzOl0KICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvci5jb2xvci1kYXJrCiAgICAgICAgICAgIGxpLm1iLTAKICAgICAgICAgICAgICBpLmZhcy5mYS1hcnJvdy1jaXJjbGUtcmlnaHQKICAgICAgICAgICAgICB8IEludGVyZmF6IGludHVpdGl2YSBjb24gdGFibGVyb3MsIGxpc3RhcyB5IHRhcmpldGFzLgogICAgICAgICAgICBsaS5tYi0wCiAgICAgICAgICAgICAgaS5mYXMuZmEtYXJyb3ctY2lyY2xlLXJpZ2h0CiAgICAgICAgICAgICAgfCBQZXJzb25hbGl6YWNpw7NuIGEgdHJhdsOpcyBkZSBQb3dlci1VcHMgKGF1dG9tYXRpemFjaW9uZXMsIGludGVncmFjaW9uZXMpLgogICAgICAgICAgICBsaS5tYi0wCiAgICAgICAgICAgICAgaS5mYXMuZmEtYXJyb3ctY2lyY2xlLXJpZ2h0CiAgICAgICAgICAgICAgfCBDb2xhYm9yYWNpw7NuIHZpc3VhbCBlbiB0aWVtcG8gcmVhbC4KICAgICAgICAgICAgbGkubWItMAogICAgICAgICAgICAgIGkuZmFzLmZhLWFycm93LWNpcmNsZS1yaWdodAogICAgICAgICAgICAgIHwgSWRlYWwgcGFyYSB2aXN1YWxpemFyIGZsdWpvIGRlIHRyYWJham8uCiAgICAgIC5jb2wtbGctNAogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTMvNC5wbmciLCBkYXRhLWFvcz0iem9vbS1pbiIpCgogICAgLy8gQmxvcXVlOiBUw610dWxvIHNpbXBsZQogICAgaDIubWItNCBFamVtcGxvIHBhc28gYSBwYXNvCiAgICBwIENvbmZpZ3VyYWNpw7NuIGRlIHVuIHRhYmxlcm8gw6FnaWwgZW4gVHJlbGxvLgoKICAgIC8vIEJsb3F1ZTogaW1nLWFjb3JkZW9uCiAgICAucm93LmFsaWduLWl0ZW1zLXN0YXJ0Lm1iLTUKICAgICAgLmNvbC1sZy00CiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMy81LnBuZyIsIGFsdD0iIikubWItNC5tYi1sZy0wCiAgICAgIC5jb2wtbGctOAogICAgICAgIEFjb3JkaW9uQSh0aXBvPSJiIikKICAgICAgICAgIC5kaXYodGl0dWxvPSJQYXNvIDEgLSBDcmVhciB1biB0YWJsZXJvIG51ZXZvIikKICAgICAgICAgICAgdWwubGlzdGEtdWwtLWNvbG9yLmNvbG9yLWRhcmsKICAgICAgICAgICAgICBsaS5tYi0wCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1hcnJvdy1jaXJjbGUtcmlnaHQKICAgICAgICAgICAgICAgIHwgTm9tYnJhcmxvIGNvbW8gIlNwcmludCA1IOKAkyBNw7NkdWxvIGRlIFJlZ2lzdHJvIi4KICAgICAgICAgICAgICBsaS5tYi0wCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1hcnJvdy1jaXJjbGUtcmlnaHQKICAgICAgICAgICAgICAgIHwgRGVmaW5pciBsaXN0YXM6IEJhY2tsb2csIFRvIERvLCBJbiBQcm9ncmVzcywgUUEsIERvbmUuCgogICAgICAgICAgLmRpdih0aXR1bG89IlBhc28gMiAtIEFncmVnYXIgdGFyamV0YXMgZGUgdGFyZWFzIikKICAgICAgICAgICAgdWwubGlzdGEtdWwtLWNvbG9yLmNvbG9yLWRhcmsKICAgICAgICAgICAgICBsaS5tYi0wCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1hcnJvdy1jaXJjbGUtcmlnaHQKICAgICAgICAgICAgICAgIHwgRWplbXBsbyBkZSB0YXJqZXRhOiAiRGlzZcOxYXIgZm9ybXVsYXJpbyBkZSByZWdpc3RybyBkZSB1c3VhcmlvIi4KICAgICAgICAgICAgICBsaS5tYi0wCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1hcnJvdy1jaXJjbGUtcmlnaHQKICAgICAgICAgICAgICAgIHwgRGVzY3JpcGNpw7NuLCBjaGVja2xpc3QsIGZlY2hhIGRlIGVudHJlZ2EsIGFzaWduYWNpw7NuIGFsIGRpc2XDsWFkb3IuCgogICAgICAgICAgLmRpdih0aXR1bG89IlBhc28gMyAtIFVzbyBkZSBldGlxdWV0YXMiKQogICAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IuY29sb3ItZGFyawogICAgICAgICAgICAgIGxpLm1iLTAKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWFycm93LWNpcmNsZS1yaWdodAogICAgICAgICAgICAgICAgfCBSb2pvIHBhcmEgdGFyZWFzIHVyZ2VudGVzLCBhenVsIHBhcmEgdGFyZWFzIGVuIGRlc2Fycm9sbG8sIHZlcmRlIHBhcmEgY29tcGxldGFkYXMuCgogICAgICAgICAgLmRpdih0aXR1bG89IlBhc28gNCAtIFNlZ3VpbWllbnRvIGRpYXJpbyIpCiAgICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvci5jb2xvci1kYXJrCiAgICAgICAgICAgICAgbGkubWItMAogICAgICAgICAgICAgICAgaS5mYXMuZmEtYXJyb3ctY2lyY2xlLXJpZ2h0CiAgICAgICAgICAgICAgICB8IER1cmFudGUgbGEgcmV1bmnDs24gZGlhcmlhLCBzZSBtdWV2ZW4gdGFyamV0YXMgZW50cmUgbGlzdGFzLCBzZWfDum4gZWwgYXZhbmNlLgogICAgICAgICAgICAgIGxpLm1iLTAKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWFycm93LWNpcmNsZS1yaWdodAogICAgICAgICAgICAgICAgfCBTZSBhZ3JlZ2FuIGNvbWVudGFyaW9zIHBhcmEgaW5kaWNhciBibG9xdWVvcyBvIGRlcGVuZGVuY2lhcy4KCiAgICAgICAgICAuZGl2KHRpdHVsbz0iUGFzbyA1IC0gQXV0b21hdGl6YWNpw7NuIChQb3dlci1VcCBkZSBCdXRsZXIpIikKICAgICAgICAgICAgdWwubGlzdGEtdWwtLWNvbG9yLmNvbG9yLWRhcmsKICAgICAgICAgICAgICBsaS5tYi0wCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1hcnJvdy1jaXJjbGUtcmlnaHQKICAgICAgICAgICAgICAgIHwgUG9yIGVqZW1wbG8sIG1vdmVyIHRhcmpldGFzIGF1dG9tw6F0aWNhbWVudGUgYSBEb25lIGN1YW5kbyBzZSBtYXJxdWUgZWwgY2hlY2tsaXN0IGNvbW8gY29tcGxldG8uCgogICAgLy8gQmxvcXVlOiB0aXR1bG8tc2VndW5kbwogICAgI3RfM18zLnRpdHVsby1zZWd1bmRvKGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgaDIgI1tzcGFuIDMuM10gQ29tcGFyYWNpw7NuIEpJUkEgdnMgVHJlbGxvCgogICAgLy8gQmxvcXVlOiBibG9xdWUtaW1nCiAgICAuYmctY29sb3ItNi5tYi01KGRhdGEtYW9zPSJmYWRlLXVwIikKICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgIC5jb2wtbGcKICAgICAgICAgIC5wLTQKICAgICAgICAgICAgcC5tYi0wKGRhdGEtYW9zPSJmYWRlLXVwIikgRW4gbGEgZ2VzdGnDs24gZGUgcHJveWVjdG9zIMOhZ2lsZXMsIGxhIGVsZWNjacOzbiBkZSBsYSBoZXJyYW1pZW50YSBhZGVjdWFkYSBwdWVkZSBzZXIgdGFuIGNydWNpYWwgY29tbyBsYSBtZXRvZG9sb2fDrWEgbWlzbWEuIFRhbnRvIEpJUkEgY29tbyBUcmVsbG8sIGRlc2Fycm9sbGFkYXMgcG9yIEF0bGFzc2lhbiwgb2ZyZWNlbiBlbmZvcXVlcyBkaWZlcmVudGVzIHBhcmEgZWwgc2VndWltaWVudG8gZGVsIHRyYWJham8uIE1pZW50cmFzIEpJUkEgZXN0w6EgZGlzZcOxYWRhIGVzcGVjw61maWNhbWVudGUgcGFyYSBtZXRvZG9sb2fDrWFzIMOhZ2lsZXMgY29tbyBTY3J1bSB5IEthbmJhbiwgVHJlbGxvIHJlc3BvbmRlIGEgdW5hIGzDs2dpY2EgZGUgZ2VzdGnDs24gdmlzdWFsIG3DoXMgZ2Vuw6lyaWNhIHkgZmxleGlibGUuIENvbXBhcmFyIGFtYmFzIGhlcnJhbWllbnRhcywgbm8gc29sbyBpbXBsaWNhIHJldmlzYXIgc3VzIGZ1bmNpb25lcywgc2lubyBhbmFsaXphciBjw7NtbyBlc3RhcyBpbXBhY3RhbiBlbiBsYSBkaW7DoW1pY2EgZGVsIGVxdWlwbywgbGEgdHJhbnNwYXJlbmNpYSBkZWwgcHJveWVjdG8geSBsYSBjYXBhY2lkYWQgZGUgZXNjYWxhciBlbCB0cmFiYWpvLgogICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgZmlndXJlCiAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWEzLzYucG5nJywgYWx0PScnKQoKICAgIC8vIEJsb3F1ZTogdGFyamV0YXMtMyAoMiBjYXJkcykKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1zdHJldGNoLm1iLTUKICAgICAgLmNvbC1sZy02Lm1iLTQoZGF0YS1hb3M9Inpvb20taW4tdXAiKQogICAgICAgIC5jdXN0b20taW1hZ2UtY2FyZC0yLmgtMTAwCiAgICAgICAgICBpbWcuY3VzdG9tLWltYWdlLWNhcmRfX2ltYWdlKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTMvNy5wbmciIGFsdD0iIikKICAgICAgICAgIC5jdXN0b20taW1hZ2UtY2FyZF9fdGV4dC5wLTQKICAgICAgICAgICAgcC5tYi0wIEpJUkEgZnVlIGNyZWFkbyBjb24gZWwgb2JqZXRpdm8gZGUgZ2VzdGlvbmFyIHByb3llY3RvcyBkZSBkZXNhcnJvbGxvIGRlIHNvZnR3YXJlIGNvbiB1biBlbmZvcXVlIMOhZ2lsLiBJbmNsdXllIG3Ds2R1bG9zIGF2YW56YWRvcyBxdWUgcGVybWl0ZW4gY29uZmlndXJhciBwcm95ZWN0b3MgU2NydW0sIHBsYW5pZmljYXIgU3ByaW50cywgYWRtaW5pc3RyYXIgaGlzdG9yaWFzIGRlIHVzdWFyaW8geSBvYnRlbmVyIHJlcG9ydGVzIHByZWNpc29zIGRlbCBkZXNlbXBlw7FvIGRlbCBlcXVpcG8uIFN1IGRpc2XDsW8gcmVzcG9uZGUgYSBlbnRvcm5vcyBjb21wbGVqb3MgeSBjb2xhYm9yYXRpdm9zIGRvbmRlIGxhIHRyYXphYmlsaWRhZCwgbGEgZG9jdW1lbnRhY2nDs24geSBsYSBpbnRlZ3JhY2nDs24gY29uIGhlcnJhbWllbnRhcyBkZSBkZXNhcnJvbGxvIHNvbiBjcsOtdGljYXMuCiAgICAgIC5jb2wtbGctNi5tYi00KGRhdGEtYW9zPSJ6b29tLWluLXVwIikKICAgICAgICAuY3VzdG9tLWltYWdlLWNhcmQtMi5oLTEwMAogICAgICAgICAgaW1nLmN1c3RvbS1pbWFnZS1jYXJkX19pbWFnZShzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzLzgucG5nIiBhbHQ9IiIpCiAgICAgICAgICAuY3VzdG9tLWltYWdlLWNhcmRfX3RleHQucC00CiAgICAgICAgICAgIHAubWItMCBUcmVsbG8sIGVuIGNhbWJpbywgZnVlIHBlbnNhZG8gaW5pY2lhbG1lbnRlIGNvbW8gdW5hIGhlcnJhbWllbnRhIGRlIGdlc3Rpw7NuIGRlIHRhcmVhcyBwYXJhIGN1YWxxdWllciB0aXBvIGRlIGVxdWlwby4gU3UgZW5mb3F1ZSB2aXN1YWwgYmFzYWRvIGVuIHRhcmpldGFzIHkgbGlzdGFzLCBmYWNpbGl0YSBsYSBvcmdhbml6YWNpw7NuIGRlbCB0cmFiYWpvLCBwZXJvIG5vIGNvbnRlbXBsYSBkZSBtYW5lcmEgbmF0aXZhLCBsb3MgYXJ0ZWZhY3RvcyBTY3J1bSwgY29tbyBiYWNrbG9nLCBTcHJpbnRzIG8gcHVudG9zIGRlIGhpc3RvcmlhLiBObyBvYnN0YW50ZSwgc3UgZmxleGliaWxpZGFkIGxhIGNvbnZpZXJ0ZSBlbiB1bmEgZXhjZWxlbnRlIGFsdGVybmF0aXZhIHBhcmEgZXF1aXBvcyBwZXF1ZcOxb3MsIGluaWNpYXRpdmFzIGxpZ2VyYXMgbyBwcm95ZWN0b3MgZWR1Y2F0aXZvcy4KCiAgICAvLyBCbG9xdWU6IFTDrXR1bG8gc2ltcGxlCiAgICBoMi5tYi00IEdlc3Rpw7NuIGRlIHByb3llY3RvcyBTY3J1bQogICAgcC5tYi00IExhIHByaW5jaXBhbCBkaWZlcmVuY2lhIG9wZXJhdGl2YSByYWRpY2EgZW4gZWwgbml2ZWwgZGUgc29wb3J0ZSBxdWUgY2FkYSBoZXJyYW1pZW50YSBvZnJlY2UgcGFyYSBsb3MgYXJ0ZWZhY3RvcyB5IGNlcmVtb25pYXMgZGUgU2NydW06CgogICAgLy8gQmxvcXVlOiB0YWJsYQogICAgLnRpdHVsby1maWd1cmEubWItMgogICAgICBoNSBUYWJsYSAxLiAKICAgICAgc3BhbiBFbGVtZW50b3MgU2NydW0KCiAgICAudGFibGEtYS5jb2xvci1hY2VudG8tY29udGVuaWRvLm1iLTUKICAgICAgdGFibGUKICAgICAgICB0aGVhZAogICAgICAgICAgdHIKICAgICAgICAgICAgdGguYmctY29sb3ItdGFibGEudGV4dC13aGl0ZSBFbGVtZW50byBTY3J1bQogICAgICAgICAgICB0aC5iZy1jb2xvci10YWJsYS50ZXh0LXdoaXRlIEpJUkEKICAgICAgICAgICAgdGguYmctY29sb3ItdGFibGEudGV4dC13aGl0ZSBUcmVsbG8KICAgICAgICB0Ym9keQogICAgICAgICAgdHIKICAgICAgICAgICAgdGQgUHJvZHVjdCBCYWNrbG9nCiAgICAgICAgICAgIHRkIEludGVncmFkbywgY29uIHByaW9yaXphY2nDs24geSBqZXJhcnF1w61hcy4KICAgICAgICAgICAgdGQgUmVxdWllcmUgY3JlYWNpw7NuIG1hbnVhbCBkZSBsaXN0YXMuCiAgICAgICAgICB0cgogICAgICAgICAgICB0ZCBTcHJpbnQgUGxhbm5pbmcKICAgICAgICAgICAgdGQgUGFuZWwgZGUgcGxhbmlmaWNhY2nDs24gZGUgU3ByaW50LgogICAgICAgICAgICB0ZCBNYW51YWwsIHVzYW5kbyBsaXN0YXMgeSB0YXJqZXRhcy4KICAgICAgICAgIHRyCiAgICAgICAgICAgIHRkIFNwcmludCBCYWNrbG9nCiAgICAgICAgICAgIHRkIEFzb2NpYWRvIGFsIFNwcmludCBhY3Rpdm8uCiAgICAgICAgICAgIHRkIEVxdWl2YWxlIGEgdW5hIGxpc3RhIGRlIHRhcmVhcyBlbiBUcmVsbG8uCiAgICAgICAgICB0cgogICAgICAgICAgICB0ZCBEYWlseSBTY3J1bQogICAgICAgICAgICB0ZCBQYW5lbCBlbiB0aWVtcG8gcmVhbCBwb3IgbWllbWJyby9lcXVpcG8uCiAgICAgICAgICAgIHRkIEFjdHVhbGl6YWNpw7NuIG1hbnVhbCBwb3IgdGFyamV0YXMuCiAgICAgICAgICB0cgogICAgICAgICAgICB0ZCBSZXZpZXcgeSBSZXRyb3NwZWN0aXZlCiAgICAgICAgICAgIHRkIEdlbmVyYWNpw7NuIGRlIGluZm9ybWVzIGF1dG9tw6F0aWNvcy4KICAgICAgICAgICAgdGQgTWFudWFsLCBjb24gY29tZW50YXJpb3MgbyBsaXN0YXMuCgogICAgLy8gQmxvcXVlOiBiZy1mdWxsLWljb25vLXRleHRvCiAgICAuYmctZnVsbC13aWR0aC5iZy1jb2xvci0zLm1iLTUKICAgICAgLnB4LTQucHgtbWQtNS5weS00LnRleHQtd2hpdGUKICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzLzkuc3ZnIiwgc3R5bGU9Im1heC13aWR0aDogOTBweCIpLm14LWF1dG8KICAgICAgICAgIC5jb2wtbGcKICAgICAgICAgICAgcC5tYi0wIEpJUkEgcGVybWl0ZSByZWxhY2lvbmFyIGhpc3RvcmlhcyBkZSB1c3VhcmlvIGNvbiB0YXJlYXMgdMOpY25pY2FzLCBidWdzLCBzdWJ0YXJlYXMsIHkgZGVwZW5kZW5jaWFzLiBFc3RhIGVzdHJ1Y3R1cmEgcmVmbGVqYSBkZSBmb3JtYSBtw6FzIGZpZGVkaWduYSBsYSBjb21wbGVqaWRhZCBkZSB1biBwcm95ZWN0byByZWFsLCBkb25kZSBsb3MgZWxlbWVudG9zIGVzdMOhbiBpbnRlcnJlbGFjaW9uYWRvcy4gUG9yIGVqZW1wbG8sIHNpIHVuYSBoaXN0b3JpYSBkZSB1c3VhcmlvIGRlcGVuZGUgZGUgdW5hIHRhcmVhIGRlIGRpc2XDsW8gcHJldmlhLCBKSVJBIHB1ZWRlIGJsb3F1ZWFybGEgaGFzdGEgcXVlIGVzYSB0YXJlYSBzZSBjb21wbGV0ZS4gRW4gVHJlbGxvLCBlc3RvIGRlYmUgZ2VzdGlvbmFyc2UgbWFudWFsbWVudGUsIGxvIHF1ZSBwdWVkZSBnZW5lcmFyIGVycm9yZXMgZGUgY29vcmRpbmFjacOzbiBlbiBwcm95ZWN0b3MgY29tcGxlam9zLgoKICAgIC8vIEJsb3F1ZTogVMOtdHVsbyBzaW1wbGUKICAgIGgyLm1iLTQgRXNjYWxhYmlsaWRhZCB5IHBlcnNvbmFsaXphY2nDs24KCiAgICAvLyBCbG9xdWU6IFRhYnNDCiAgICBUYWJzQy5jb2xvci1hY2VudG8tY29udGVuaWRvLm1iLTUKICAgICAgLnRhYnMtY29udGVudC5ib3JkZXIucHgtNC5wLW1kLTUucHktMyh0aXR1bG89IkpJUkEiIDppY29uPSJyZXF1aXJlKCdAL2Fzc2V0cy9idWxsZXRzL2ljb24tdGFiLWMtMS5zdmcnKSIpCiAgICAgICAgLnJvdwogICAgICAgICAgLmNvbC1tZC02LmNvbC1sZy03LmNvbC14bC04Lm1iLTQubWItbWQtMC5vcmRlci0yCiAgICAgICAgICAgIGg0IEpJUkEKICAgICAgICAgICAgcCBEZXN0YWNhIHBvciBzdSBlc2NhbGFiaWxpZGFkLiBFcyBjYXBheiBkZSBtYW5lamFyIG3Dumx0aXBsZXMgZXF1aXBvcyBlbiBwYXJhbGVsbywgY29uIGNvbmZpZ3VyYWNpb25lcyBkaXN0aW50YXMgcGFyYSBjYWRhIHByb3llY3RvLiBTZSBwdWVkZW4gZGVmaW5pciBmbHVqb3MgZGUgdHJhYmFqbyBwZXJzb25hbGl6YWRvcywgdGlwb3MgZGUgaXNzdWVzLCByZWdsYXMgZGUgYXV0b21hdGl6YWNpw7NuLCB5IHRhYmxlcm9zIGRlIHNlZ3VpbWllbnRvIGRpc3RpbnRvcywgc2Vnw7puIGxhcyBuZWNlc2lkYWRlcyBkZWwgZXF1aXBvLgogICAgICAgICAgLmNvbC1tZC02LmNvbC1sZy01LmNvbC14bC00Lm9yZGVyLTEKICAgICAgICAgICAgZmlndXJlKGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMy8xMC5wbmcnLCBhbHQ9JycpCgogICAgICAudGFicy1jb250ZW50LmJvcmRlci5weC00LnAtbWQtNS5weS0zKHRpdHVsbz0iVHJlbGxvIiA6aWNvbj0icmVxdWlyZSgnQC9hc3NldHMvYnVsbGV0cy9pY29uLXRhYi1jLTEuc3ZnJykiKQogICAgICAgIC5yb3cKICAgICAgICAgIC5jb2wtbWQtNi5jb2wtbGctNy5jb2wteGwtOC5tYi00Lm1iLW1kLTAub3JkZXItMgogICAgICAgICAgICBoNCBUcmVsbG8KICAgICAgICAgICAgcCBUcmVsbG8sIGF1bnF1ZSBsaW1pdGFkbyBlbiBlc3RlIHNlbnRpZG8sIG9mcmVjZSB1bmEgZXhwZXJpZW5jaWEgbcOhcyBzaW1wbGUsIGxvIHF1ZSBwdWVkZSBzZXIgdW5hIHZlbnRhamEgcGFyYSBwcm95ZWN0b3MgcGVxdWXDsW9zIG8gcHJvdG90aXBvcyBxdWUgbm8gcmVxdWllcmVuIGVzdHJ1Y3R1cmFzIGNvbXBsZWphcy4KICAgICAgICAgIC5jb2wtbWQtNi5jb2wtbGctNS5jb2wteGwtNC5vcmRlci0xCiAgICAgICAgICAgIGZpZ3VyZShkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTMvMTEucG5nJywgYWx0PScnKQoKICAgIC8vIEJsb3F1ZTogdGV4dG8tY29sb3ItaW1hZ2VuIDg6NAogICAgLnJvdy5tYi01CiAgICAgIC5jb2wtbGctOAogICAgICAgIHAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLm1iLTQgVW5vIGRlIGxvcyBmYWN0b3JlcyBjbGF2ZSBlbiBsYSBnZXN0acOzbiDDoWdpbCBlcyBsYSBjYXBhY2lkYWQgZGUgbWVkaXIgZWwgcmVuZGltaWVudG8gZGVsIGVxdWlwby4gSklSQSBvZnJlY2UgdW5hIHN1aXRlIGRlIHJlcG9ydGVzIGF1dG9tw6F0aWNvcywgY29tbzoKCiAgICAgICAgLmJnLWNvbG9yLTQucC00KGRhdGEtYW9zPSJmYWRlLWxlZnQiKS5tYi00CiAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IuY29sb3ItZGFyawogICAgICAgICAgICBsaS5tYi0wCiAgICAgICAgICAgICAgaS5mYXMuZmEtYXJyb3ctY2lyY2xlLXJpZ2h0CiAgICAgICAgICAgICAgfCBCdXJuZG93biBDaGFydC4gTXVlc3RyYSBlbCB0cmFiYWpvIHBlbmRpZW50ZSBlbiB1biBTcHJpbnQuCiAgICAgICAgICAgIGxpLm1iLTAKICAgICAgICAgICAgICBpLmZhcy5mYS1hcnJvdy1jaXJjbGUtcmlnaHQKICAgICAgICAgICAgICB8IFZlbG9jaXR5IENoYXJ0LiBBeXVkYSBhIHByZWRlY2lyIGxhIGNhcGFjaWRhZCBmdXR1cmEgZGVsIGVxdWlwby4KICAgICAgICAgICAgbGkubWItMAogICAgICAgICAgICAgIGkuZmFzLmZhLWFycm93LWNpcmNsZS1yaWdodAogICAgICAgICAgICAgIHwgQ3VtdWxhdGl2ZSBGbG93IERpYWdyYW0uIEluZGljYSBjdWVsbG9zIGRlIGJvdGVsbGEgeSBmbHVqbyBkZSB0cmFiYWpvLgoKICAgICAgICBwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKS5tYi00IFRyZWxsbywgcG9yIHN1IHBhcnRlLCBubyBjdWVudGEgY29uIGVzdG9zIGluZm9ybWVzIGRlIG1hbmVyYSBwcmVkZXRlcm1pbmFkYS4gU2luIGVtYmFyZ28sIHNlIHB1ZWRlbiBvYnRlbmVyIG1lZGlhbnRlIFBvd2VyLVVwcyAoY29tcGxlbWVudG9zKSwgYXVucXVlIGNvbiB1bmEgZnVuY2lvbmFsaWRhZCBsaW1pdGFkYSB5IG11Y2hhcyB2ZWNlcyBlbiB2ZXJzacOzbiBkZSBwYWdvLgoKICAgICAgICBwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSAjW3N0cm9uZyBFamVtcGxvIHByw6FjdGljby5dIFVuIGVxdWlwbyBkZSBkZXNhcnJvbGxvIHF1ZSB0cmFiYWphIGVuIHVuIHByb2R1Y3RvIFNhYVMgYSBsYXJnbyBwbGF6byBzZSBiZW5lZmljaWFyw6EgZW5vcm1lbWVudGUgZGUgbG9zIHJlcG9ydGVzIGRlIEpJUkEgcGFyYSBvcHRpbWl6YXIgc3UgcmVuZGltaWVudG8gU3ByaW50IHRyYXMgU3ByaW50LiBFbiBjb250cmFzdGUsIHVuIGVxdWlwbyBkZSBtYXJrZXRpbmcgcXVlIG9yZ2FuaXphIGNhbXBhw7FhcyBtZW5zdWFsZXMsIHBvZHLDrWEgZnVuY2lvbmFyIGVmaWNpZW50ZW1lbnRlIGNvbiBUcmVsbG8sIHBvcnF1ZSBubyByZXF1aWVyZSBlc3RpbWFjaW9uZXMgbmkgbcOpdHJpY2FzIGNvbXBsZWphcy4KCiAgICAgIC5jb2wtbGctNAogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTMvMTIucG5nIiwgZGF0YS1hb3M9Inpvb20taW4iKQoKICAgIC8vIEJsb3F1ZTogVMOtdHVsbyBzaW1wbGUKICAgIGgyLm1iLTQgQ29zdG9zIHkgY3VydmEgZGUgYXByZW5kaXphamUKCiAgICAvLyBCbG9xdWU6IGltYWdlbi10ZXh0by1jb2xvcgogICAgLnJvdy5tYi01CiAgICAgIC5jb2wtbGctNQogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTMvMTMucG5nIiwgZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAuY29sLWxnLTcKICAgICAgICBwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKS5tYi00IEF1bnF1ZSBhbWJhcyBoZXJyYW1pZW50YXMgdGllbmVuIHZlcnNpb25lcyBncmF0dWl0YXMsIHN1IGFjY2VzbyBhIGZ1bmNpb25lcyBhdmFuemFkYXMgdmFyw61hLgoKICAgICAgICAuYmctY29sb3ItNi5wLTQoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLm1iLTQKICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvci5jb2xvci1kYXJrCiAgICAgICAgICAgIGxpLm1iLTAKICAgICAgICAgICAgICBpLmZhcy5mYS1hcnJvdy1jaXJjbGUtcmlnaHQKICAgICAgICAgICAgICB8ICNbc3Ryb25nIEpJUkEuXSBSZXF1aWVyZSBtYXlvciB0aWVtcG8gZGUgY2FwYWNpdGFjacOzbiwgcGVybyBzdSBwb3RlbmNpYWwgZXMgYW1wbGlvLiBJZGVhbCBwYXJhIG9yZ2FuaXphY2lvbmVzIGNvbiBlcXVpcG9zIHTDqWNuaWNvcyBlc3RydWN0dXJhZG9zLgogICAgICAgICAgICBsaS5tYi0wCiAgICAgICAgICAgICAgaS5mYXMuZmEtYXJyb3ctY2lyY2xlLXJpZ2h0CiAgICAgICAgICAgICAgfCAjW3N0cm9uZyBUcmVsbG8uXSBJbnR1aXRpdm8sIGRlIHLDoXBpZGEgYWRvcGNpw7NuLCBwZXJvIGNvbiBsaW1pdGFjaW9uZXMgZW4gcHJveWVjdG9zIGRlIGFsdGEgY29tcGxlamlkYWQuCgogICAgICAgIHAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIExhIGVsZWNjacOzbiBlbnRyZSBKSVJBIHkgVHJlbGxvIG5vIGRlYmUgYmFzYXJzZSDDum5pY2FtZW50ZSBlbiBsYSBpbnRlcmZheiBvIGVsIHByZWNpbywgc2lubyBlbiBsYSBhbGluZWFjacOzbiBjb24gbGEgY29tcGxlamlkYWQgZGVsIHByb3llY3RvIHkgZWwgbml2ZWwgZGUgbWFkdXJleiBkZWwgZXF1aXBvLiBQYXJhIGVxdWlwb3MgU2NydW0gY29uIHVuYSBuZWNlc2lkYWQgcHJvZnVuZGEgZGUgcGxhbmlmaWNhY2nDs24sIHRyYXphYmlsaWRhZCB5IG1lam9yYSBjb250aW51YSwgSklSQSBlcyBjbGFyYW1lbnRlIHN1cGVyaW9yLiBTaW4gZW1iYXJnbywgcGFyYSBlcXVpcG9zIHBlcXVlw7FvcywgY29uIGRpbsOhbWljYXMgbGlnZXJhcyB5IHNpbiByZXF1ZXJpbWllbnRvcyB0w6ljbmljb3MgZXhpZ2VudGVzLCBUcmVsbG8gb2ZyZWNlIHVuYSBzb2x1Y2nDs24gcHLDoWN0aWNhLCByw6FwaWRhIHkgdmlzdWFsbWVudGUgYXRyYWN0aXZhLgoKICAgICAgICBwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBBbWJhcyBoZXJyYW1pZW50YXMgcHJvbXVldmVuIGxhIHRyYW5zcGFyZW5jaWEgeSBsYSBjb2xhYm9yYWNpw7NuLCBwaWxhcmVzIGZ1bmRhbWVudGFsZXMgZGVsIG1hcmNvIFNjcnVtLiBTdSBlbGVjY2nDs24gZXN0cmF0w6lnaWNhIHB1ZWRlIG1hcmNhciBsYSBkaWZlcmVuY2lhIGVudHJlIHVuIGVxdWlwbyBxdWUgcmVhY2Npb25hIGFudGUgbG9zIGNhbWJpb3MgeSB1bm8gcXVlIHNlIGFkYXB0YSBjb24gYWdpbGlkYWQgeSBjb25maWFuemEuCgogICAgLy8gQmxvcXVlOiBmaWd1cmEtY29tcGxldGEKICAgIC50aXR1bG8tZmlndXJhLm1iLTIKICAgICAgaDUgRmlndXJhIDEuIAogICAgICBzcGFuIFRyZWxsbyB2cyBKaXJhCgogICAgZmlndXJlLmJnLWNvbG9yLTEucC00LnAtbWQtNS5tYi01CiAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzLzE0LnN2ZyIsIGRhdGEtYW9zPSJ6b29tLWluIiwgc3R5bGU9Im1heC13aWR0aDogOTAwcHgiKS5teC1hdXRvCgoKICAgIHAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIEVsIGRvbWluaW8gZGUgaGVycmFtaWVudGFzIGNvbW8gSklSQSB5IFRyZWxsbywgbm8gc29sbyBvcHRpbWl6YSBlbCBzZWd1aW1pZW50byBkZSBsb3MgcHJveWVjdG9zLCBzaW5vIHF1ZSBwb3RlbmNpYSBsYSBhdXRvZ2VzdGnDs24gZGVsIGVxdWlwbywgZmFjaWxpdGEgbGEgdmlzaWJpbGlkYWQgZGUgbGFzIHRhcmVhcyB5IGNvbnRyaWJ1eWUgYSBsYSBlbnRyZWdhIGNvbnRpbnVhIGRlIHZhbG9yLiBFbiB1biBlbnRvcm5vIMOhZ2lsLCBlbGVnaXIgbGEgaGVycmFtaWVudGEgYWRlY3VhZGEgcHVlZGUgbWFyY2FyIGxhIGRpZmVyZW5jaWEgZW50cmUgdW4gZXF1aXBvIG9yZ2FuaXphZG8geSB1bm8gZGVzYm9yZGFkbyBwb3IgbGEgaW5jZXJ0aWR1bWJyZS4KICAgIAogICAgLy8gQmxvcXVlOiBhY3RpdmlkYWQKICAgIC5iZy1mdWxsLXdpZHRoLmJvcmRlci10b3AuYWN0aXZpZGFkLmJnLWNvbG9yLWFjdGl2aWRhZAogICAgICAucC00LnAtbWQtNQogICAgICAgICNBY3RpdmlkYWQKICAgICAgICAgIDxBY3RpdmlkYWQgOmN1ZXN0aW9uYXJpbz0iY3Vlc3Rpb25hcmlvIi8+CgogICAgLy8gQmxvcXVlOiBtYXRlcmlhbC1jb21wbGVtZW50YXJpbwogICAgLmJnLWZ1bGwtd2lkdGguYm9yZGVyLXRvcC5jb2xvci1wcmltYXJpbwogICAgICAucC00LnAtbWQtNQogICAgICAgIGgyKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBNQVRFUklBTCBDT01QTEVNRU5UQVJJTwogICAgICAgIC5yb3cubWF0ZXJpYWwtY29tcGxlbWVudGFyaW8KICAgICAgICAgIC5jb2wtMTIuY29sLW1kLTYuY29sLWxnLTcKICAgICAgICAgICAgcCBMb3MgaW52aXRhbW9zIGEgZXhwbG9yYXIgZWwgbWF0ZXJpYWwgY29tcGxlbWVudGFyaW8gcXVlIGFtcGxpYXLDoSBzdXMgY29ub2NpbWllbnRvcyBzb2JyZSBtZXRvZG9sb2fDrWFzIMOhZ2lsZXMuCiAgICAgICAgICAgIHAuZC1mbGV4Lm15LTQKICAgICAgICAgICAgICBpbWcubWUtMyhzcmM9J0AvYXNzZXRzL2NvbXBvbmVudGVzL2xpbmsuc3ZnJyA6c3R5bGU9InsnbWF4LXdpZHRoJzonMTZweCd9IikKICAgICAgICAgICAgICBhKGhyZWY9Imh0dHBzOi8vZWxpYnJvLm5ldC9lcy9sYy90ZWNub2xvZ2ljYWRlbG9yaWVudGUvdGl0dWxvcy8yODU2OSIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciIpIENsZXJ5IEFndWlycmUsIEEuIEcuICgyMDA5KS4gQXBsaWNhY2nDs24geSB1c28gZGVsIHNpc3RlbWEgS2FuYmFuIHBhcmEgbG9ncmFyIGxhIGVmaWNpZW5jaWEgb3BlcmF0aXZhIGRlIHVuYSBlbXByZXNhLiBFbCBDaWQgRWRpdG9yLgogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy90ZW1wbGF0ZS9pY29uby15dC5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEoaHJlZj0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1jY1NTNEM1R1l4cyIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciIpIE1vYmlsaXphIEFjYWRlbXkuICgyMDIxKS4gTGFzIG1lam9yZXMgbWV0b2RvbG9nw61hcyDDoWdpbGVzIHBhcmEgZWwgRGVzYXJyb2xsbyBkZSBTb2Z0d2FyZSBbdmlkZW9dLiBZb3VUdWJlLgogICAgICAgICAgLmNvbC0xMi5jb2wtbWQtNi5jb2wtbGctMy5vZmZzZXQtbGctMQogICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jb21wb25lbnRlcy9tYXRlcmlhbC1jb21wbGVtZW50YXJpby5zdmcnLCBhbHQ9JycpCgo="},null]}